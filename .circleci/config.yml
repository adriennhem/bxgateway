version: 2.1

executors:
  bloxroute-executor:
    docker:
    # TODO: Use AWS repository or create bloxRoute account on Docker Hub
    - image: sergeyi/circleci-bxgateway:latest
    environment:
      PYTHONPATH: /root/ws/bxcommon/src:/root/ws/bxgateway/src:/root/ws/bxextensions
    working_directory: ~/ws

jobs:
  initialize:
    executor: bloxroute-executor
    working_directory: ~/ws
    steps:
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            "bxgateway"
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "bxgateway/requirements.txt" }}
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "bxgateway/requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: install bxcommon
          command: |
             cd ~/ws/bxgateway
             branchName=$(git rev-parse --abbrev-ref HEAD)

             cd ~/ws
             { # try
                 echo "Trying to clone identical branch name '$branchName' from bxcommon."
                 git clone -b $branchName --single-branch --depth=1 git@github.com:bloXroute-Labs/bxcommon.git
             } || { # catch
                 echo "Trying bxcommon develop branch, could not find identical branch name '$branchName'"
                 git clone -b develop --single-branch --depth=1 git@github.com:bloXroute-Labs/bxcommon.git
             }
             cd bxcommon
             bxcommonBranch=$(git rev-parse --abbrev-ref HEAD)
             echo "Resolved branch $bxcommonBranch for bxcommon."
      - run:
          name: Install bxextensions dependency
          command: |
            { # try
                echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from bxextensions."
                git clone -b $CIRCLE_BRANCH --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/bxextensions.git
            } || { # catch
                echo "Trying bxextensions develop branch, could not find identical branch name '$CIRCLE_BRANCH'."
                git clone -b develop --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/bxextensions.git
            }
      - run: # install and activate virtual environment with pip
          name: installing virtual env
          command: |
            python -m virtualenv venv
            . venv/bin/activate
            pip install -r bxgateway/requirements.txt
            pip install -r bxcommon/requirements.txt
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxextensions
            - bxcommon
            - bxgateway

  build_extensions:
    executor: bloxroute-executor
    working_directory: ~/ws
    steps:
      - attach_workspace:
          at: ~/ws
      - run:
          name: install dependencies
          command: |
            apk add --no-cache build-base musl automake autoconf libtool openssl-dev cmake
      - run:
          name: build extensions
          command: |
            . venv/bin/activate
            cd bxextensions
            python build_extensions.py
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxextensions
            - bxcommon
            - bxgateway

  test:
    executor: bloxroute-executor
    steps:
    - attach_workspace:
        at: ~/ws
    - run: # run tests
        name: Unit Tests
        command: |
          . venv/bin/activate
          cd bxgateway/test/unit
          python -m unittest discover --verbose
    - run: # check coverage
        name: Check Coverage
        command: |
          . venv/bin/activate
          cd bxgateway/test/unit
          coverage run --source=/root/ws/bxgateway/src -m unittest discover && coverage report --fail-under=01
    - run: # run tests
        name: Integration Tests
        command: |
          . venv/bin/activate
          cd bxgateway/test/integration
          python -m unittest discover --verbose
    - run: # run pylint
        name: Lint Score
        command: |
          . venv/bin/activate
          cd bxgateway
          # The || exit 0 bypasses not failing the build for <10 score
          PYTHONPATH=../bxcommon/src/ pylint src/bxgateway --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --rcfile=../bxcommon/pylintrc || exit 0
    - store_artifacts:
        path: test-reports/
        destination: tr1

  e2e:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            "bxgateway"
      - run:
          name: Try to clone corresponding branches
          command: |
            cd ~/ws
            { # try
                echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from bxgateway."
                git clone -b $CIRCLE_BRANCH --single-branch --depth=1 git@github.com:bloXroute-Labs/bxe2e.git
            } || { # catch
                echo "Trying bxe2e develop branch, could not find identical branch name '$CIRCLE_BRANCH' in bxrelay."
                git clone -b develop --single-branch --depth=1 git@github.com:bloXroute-Labs/bxe2e.git
            }
            { # try
                echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from bxgateway."
                git clone -b $CIRCLE_BRANCH --single-branch --depth=1 git@github.com:bloXroute-Labs/bxrelay.git
            } || { # catch
                echo "Trying bxrelay develop branch, could not find identical branch name '$CIRCLE_BRANCH  in bxrelay."
                git clone -b develop --single-branch --depth=1 git@github.com:bloXroute-Labs/bxrelay.git
            }
      - run:
          name: Initialize virtualenv
          command: |
            . venv/bin/activate
            pip install -r bxrelay/requirements.txt
      - run:
          name: Integration Test
          command: |
            . venv/bin/activate
            cd bxe2e/test/integration
            PYTHONPATH=$PYTHONPATH:/root/ws/bxe2e/src:/root/ws/bxrelay/src \
            python -m unittest discover --verbose

  build:
    working_directory: ~/ws
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            "bxgateway"
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: create binaries for docker image
          command: |
            cd ~/ws/bxextensions
            . ./build.sh
            cd ~/ws
      - run:
          name: Build application Docker image
          command: |
            cd ~/ws/bxgateway && docker build -f Dockerfile --cache-from=app -t app ../
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache: 
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         login="$(aws ecr get-login)"
      #         ${login}
      #         docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #         docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #       fi

workflows:
  version: 2

  test-build:
    jobs:
      - initialize
      - build:
          requires:
            - initialize
      - build_extensions:
          requires:
            - initialize
      - test:
          requires:
            - build_extensions
      - e2e:
          requires:
            - build_extensions
